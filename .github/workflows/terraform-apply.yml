name: terraform-apply

on:
  workflow_call:
    inputs:
      directory:
        description: >
          Path to the directory containing Terraform configuration.
          Defaults to ./terraform.
        required: false
        type: string
        default: "./terraform"
      environment:
        description: >
          The environment to use for the Terraform apply step.
          This can be used to set up extra approval before applying changes.
        required: false
        type: string
        default: "github"
      extra_init_args:
        description: >
          Extra arguments to pass to the 'terraform init' command.
        required: false
        type: string
        default: "-lockfile=readonly"
      extra_args:
        description: >
          Extra arguments to pass to the 'terraform plan' and 'terraform apply' commands. 
          Useful for (dynamically) injecting variable files or flags.
        required: false
        type: string
        default: ""
      terraform_version:
        description: >
          The version of Terraform to install and use.
        required: false
        type: string
        default: "1.12.2"
      encrypted_artifact_name:
        description: >
          Name of the encrypted artifact to download. The artifact must contain a single file named `archive.tar.age` created by the upload-encrypted-artifact action.
        required: false
        type: string
        default: ""
      runs-on:
        description: >
          The type of runner to use for the workflow. Defaults to 'ubuntu-latest'.
          You can specify a different runner if needed.
        required: false
        type: string
        default: "ubuntu-latest"

    secrets:
      AWS_ACCESS_KEY_ID:
        description: >
          AWS access key for authenticating with Terraform providers.
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: >
          AWS secret key for authenticating with Terraform providers.
        required: true
      GITHUB_APP_ID:
        description: >
          GitHub App ID used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true
      GITHUB_APP_INSTALLATION_ID:
        description: >
          GitHub App Installation ID used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true
      GITHUB_APP_PEM_FILE:
        description: >
          GitHub App private key (PEM format) used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true
      ARTIFACT_IDENTITY:
        description: >
          age identity (private key) used to decrypt the encrypted artifact (full contents starting with '# created:' and containing 'AGE-SECRET-KEY-'). Use the matching recipient public key when uploading.
        required: false
    outputs:
      apply_outcome:
        description: |
          The status of the Terraform apply step, which can be used to determine if the apply was successful or not.
        value: ${{ jobs.apply.outputs.apply_outcome }}
      apply_output:
        description: |
          The output of the Terraform apply step.
        value: ${{ jobs.apply.outputs.apply_output }}

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
  GITHUB_APP_INSTALLATION_ID: ${{ secrets.GITHUB_APP_INSTALLATION_ID }}
  GITHUB_APP_PEM_FILE: ${{ secrets.GITHUB_APP_PEM_FILE }}

jobs:
  plan:
    name: terraform-plan
    runs-on: ${{ inputs.runs-on }}
    outputs:
      plan-id: ${{ steps.generate-plan-id.outputs.plan-id }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.directory }}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Generate random plan ID
      id: generate-plan-id
      run: |
        PLAN_ID=$(echo $RANDOM | md5sum | cut -c1-8)
        echo "PLAN_ID=$PLAN_ID" >> $GITHUB_ENV
        echo "plan-id=$PLAN_ID" >> $GITHUB_OUTPUT

    - name: Download encrypted artifact
      if: ${{ inputs.encrypted_artifact_name != '' }}
      uses: eidp/actions-terraform/download-encrypted-artifact@b98cb7878f82a41977fab8f6d387006017796e5f # v1.2.0
      with:
        artifact_name: ${{ inputs.encrypted_artifact_name }}
        identity: ${{ secrets.ARTIFACT_IDENTITY }}
        out_dir: "./"

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '20.x'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.8.2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform Init
      id: init
      run: terraform init ${{ inputs.extra_init_args }} -input=false

    - name: Terraform Plan
      id: plan
      run: |
        set -o pipefail
        if [ "${{ inputs.debug }}" = "true" ]; then
            export TF_LOG=TRACE
            export TF_LOG_PATH=./terraform.log
        fi

        terraform plan -input=false -no-color ${{ inputs.extra_args }} -out=tfplan && terraform show -no-color tfplan || PLAN_EXIT_CODE=$?

        if [ -f ./terraform.log ]; then
          echo "----- Terraform Debug Log -----"
          cat ./terraform.log
        fi
        exit ${PLAN_EXIT_CODE:-0}

    - name: Upload plan artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: tfplan-${{ env.PLAN_ID }}
        path: ${{ inputs.directory }}/tfplan

  apply:
    needs: [plan]
    name: terraform-apply
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}-apply
    outputs:
      apply_outcome: ${{ steps.apply.outcome }}
      apply_output: ${{ steps.apply.outputs.stdout }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.directory }}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Download encrypted artifact
      if: ${{ inputs.encrypted_artifact_name != '' }}
      uses: eidp/actions-terraform/download-encrypted-artifact@b98cb7878f82a41977fab8f6d387006017796e5f # v1.2.0
      with:
        artifact_name: ${{ inputs.encrypted_artifact_name }}
        identity: ${{ secrets.ARTIFACT_IDENTITY }}
        out_dir: "./"

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '20.x'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform Init
      id: init
      run: terraform init ${{ inputs.extra_init_args }} -input=false

    - name: Download plan artifact
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: tfplan-${{ needs.plan.outputs.plan-id }}
        path: ${{ inputs.directory }}

    - name: Terraform Apply
      id: apply
      run: |
        set -o pipefail
        if [ "${{ inputs.debug }}" = "true" ]; then
          export TF_LOG=TRACE
          export TF_LOG_PATH=./terraform.log
        fi

        terraform apply ${{ inputs.extra_args }} -auto-approve -input=false -no-color tfplan || APPLY_EXIT_CODE=$?

        if [ -f ./terraform.log ]; then
          echo "----- Terraform Debug Log -----"
          cat ./terraform.log
        fi

        exit ${APPLY_EXIT_CODE:-0}
