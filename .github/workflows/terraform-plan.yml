name: Terraform Plan

on:
  workflow_call:
    inputs:
      directory:
        description: >
          Path to the directory containing Terraform configuration.
          Defaults to ./terraform.
        required: false
        type: string
        default: "./terraform"

      terraform_version:
        description: >
          The version of Terraform to install and use.
        required: false
        type: string
        default: "1.12.2"

      extra_init_args:
        description: >
          Extra arguments to pass to the 'terraform init' command.
        required: false
        type: string
        default: "-lockfile=readonly"

      extra_args:
        description: >
          Extra arguments to pass to the 'terraform plan' command. 
          Useful for (dynamically) injecting variable files or flags.
        required: false
        type: string
        default: ""

    secrets:
      AWS_ACCESS_KEY_ID:
        description: >
          AWS access key for authenticating with Terraform providers.
        required: true

      AWS_SECRET_ACCESS_KEY:
        description: >
          AWS secret key for authenticating with Terraform providers.
        required: true

      GITHUB_APP_ID:
        description: >
          GitHub App ID used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true

      GITHUB_APP_PEM_FILE:
        description: >
          GitHub App private key (PEM format) used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true

      GITHUB_APP_INSTALLATION_ID:
        description: >
          GitHub App Installation ID used by Terraform to authenticate with the GitHub API and for commenting on PRs.
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
  GITHUB_APP_INSTALLATION_ID: ${{ secrets.GITHUB_APP_INSTALLATION_ID }}
  GITHUB_APP_PEM_FILE: ${{ secrets.GITHUB_APP_PEM_FILE }}

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.directory }}

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform Init
      id: init
      run: terraform init ${{ inputs.extra_init_args }} -input=false

    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color ${{ inputs.extra_args }} -out=tfplan
        terraform show -no-color tfplan

    - name: Generate App token
      id: generate-app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ secrets.GITHUB_APP_ID }}
        private-key: ${{ secrets.GITHUB_APP_PEM_FILE }}

    - name: Comment on PR
      id: add-pr-comment
      if: always()
      uses: mshick/add-pr-comment@v2
      with:
        repo-token: ${{ steps.generate-app-token.outputs.token }}
        message: |
          #### üñå **Terraform Format and Style:** `${{ steps.fmt.outcome }}`
          #### ‚öôÔ∏è **Terraform Initialization:** `${{ steps.init.outcome }}`
          #### ü§ñ **Terraform Validation:**  `${{ steps.validate.outcome }}`
          #### üìñ **Terraform Plan:** `${{ steps.plan.outcome }}`

          <details>
            <summary><b>üîç Show Terraform Plan</b></summary>

            <blockquote>

          ```tf
          ${{ steps.plan.outputs.stdout }}
          ```

            </blockquote>
          </details>
        message-failure: |
          #### üñå **Terraform Format and Style:** `${{ steps.fmt.outcome }}`
          #### ‚öôÔ∏è **Terraform Initialization:** `${{ steps.init.outcome }}`
          #### ü§ñ **Terraform Validation:** `${{ steps.validate.outcome }}`
          #### üìñ **Terraform Plan:** `${{ steps.plan.outcome }}`

          <details>
            <summary><b>üîç Show Plan Error</b></summary>

            <blockquote>

          ```tf
          ${{ steps.plan.outputs.stderr }}
          ```

            </blockquote>
          </details>