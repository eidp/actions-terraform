name: download-encrypted-artifact
description: |
  Downloads an encrypted artifact file, decrypts it and extract its contents.

  This action downloads an artifact containing `archive.tar.bin`, decrypts it to `archive.tar` and extracts (untars) into the target directory.
  - Cipher: OpenSSL symmetric cipher (default: aes-256-cbc)
  - KDF: pbkdf2 with salt (OpenSSL default for `-pbkdf2 -salt`)

author: eidp
branding:
  icon: unlock
  color: green
inputs:
  directory:
    description: Directory to run the action in (defaults to current working directory).
    required: false
    default: ''
  artifact_name:
    description: Name of the artifact to download that contains `archive.tar.bin`.
    required: false
    default: encrypted-artifact
  encrypted_file:
    description: Path to the encrypted archive file (archive.tar.bin). If not provided, defaults to `archive.tar.bin` in the current directory when an artifact is downloaded.
    required: false
    default: ''
  key:
    description: Passphrase used for encryption/decryption (store as a secret).
    required: true
  out_dir:
    description: Directory to extract the decrypted archive into (defaults to current working directory).
    required: false
    default: .
  cipher:
    description: OpenSSL cipher used (default aes-256-cbc).
    required: false
  cleanup:
    description: Whether to remove archive.tar and archive.tar.bin after extraction (true/false, default true).
    required: false
    default: 'true'
runs:
  using: composite
  steps:
  - name: Download encrypted archive artifact
    uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
    with:
      name: ${{ inputs.artifact_name }}

  - id: decrypt-and-extract
    shell: bash
    run: |
      set -euo pipefail
      
      if [ -z "${{ inputs.directory }}" ]; then
        WORKDIR="$(pwd)"
      else
        WORKDIR="${{ inputs.directory }}"
      fi
      cd "$WORKDIR"

      KEY="${{ inputs.key }}"; OUT_DIR="${{ inputs.out_dir }}"
      CIPHER="${{ inputs.cipher }}"; if [ -z "${CIPHER}" ]; then CIPHER=aes-256-cbc; fi
      CLEANUP="${{ inputs.cleanup }}";
      ENC_INPUT="${{ inputs.encrypted_file }}"; if [ -z "${ENC_INPUT}" ]; then ENC_INPUT="archive.tar.bin"; fi

      if [ ! -f "$ENC_INPUT" ]; then
        echo "Encrypted file not found: $ENC_INPUT" >&2
        exit 1
      fi

      mkdir -p "$OUT_DIR"
      ARCHIVE="$OUT_DIR/archive.tar"

      # Decrypt archive.tar.bin -> archive.tar
      openssl enc -"$CIPHER" -d -pbkdf2 -pass pass:"$KEY" -in "$ENC_INPUT" -out "$ARCHIVE"

      # Extract into OUT_DIR
      tar -xf "$ARCHIVE" -C "$OUT_DIR"

      if [ "${CLEANUP}" = "true" ]; then
        rm -f "$ARCHIVE" "$ENC_INPUT"
      fi

      echo "Decrypted and extracted archive to: $OUT_DIR"
outputs: {}
